name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set Up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/RAMCAR-KEY.pem
        chmod 400 ~/.ssh/RAMCAR-KEY.pem
        ssh-keyscan -H ec2-13-228-155-38.ap-southeast-1.compute.amazonaws.com >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/RAMCAR-KEY.pem ubuntu@ec2-13-228-155-38.ap-southeast-1.compute.amazonaws.com << 'EOF'
          set -e

          # Step 1: Update and Upgrade System
          echo "Updating and upgrading the system..."
          sudo apt-get update -y
          sudo apt-get upgrade -y

          # Step 2: Install Docker
          echo "Installing Docker..."
          sudo apt-get install -y \
            ca-certificates \
            curl \
            gnupg \
            lsb-release
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update -y
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          # Step 3: Pull Docker images
          echo "Pulling Docker images..."
          docker pull kingdinner1/postgres:13
          docker pull kingdinner1/laravel-app:latest
          docker pull nginx:latest

          # Step 4: Set up Docker network
          echo "Setting up Docker network..."
          docker network create app_network || true

          # Step 5: Clean up existing containers
          echo "Cleaning up existing containers..."
          docker stop postgres || true && docker rm postgres || true
          docker stop laravel-app || true && docker rm laravel-app || true
          docker stop nginx || true && docker rm nginx || true

          # Step 6: Start Docker containers
          echo "Starting PostgreSQL container..."
          docker run -d \
            --name postgres \
            --network app_network \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=root \
            -e POSTGRES_DB=labormanual \
            -p 5432:5432 \
            kingdinner1/postgres:13

          echo "Starting Laravel application container..."
          docker run -d \
            --name laravel-app \
            --network app_network \
            -e DB_CONNECTION=pgsql \
            -e DB_HOST=postgres \
            -e DB_PORT=5432 \
            -e DB_DATABASE=labormanual \
            -e DB_USERNAME=postgres \
            -e DB_PASSWORD=root \
            -p 9000:9000 \
            kingdinner1/laravel-app:latest

          echo "Starting Nginx container..."
          docker run -d \
            --name nginx \
            --network app_network \
            -p 80:80 \
            -v /home/ubuntu/nginx.conf:/etc/nginx/nginx.conf \
            nginx:latest

          # Step 7: Verify deployment
          echo "Verifying deployment..."
          docker ps

          echo "Deployment completed successfully."
        EOF
